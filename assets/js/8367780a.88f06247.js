"use strict";(self.webpackChunkos_course=self.webpackChunkos_course||[]).push([[597],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},8931:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"leetcode_patterns/dynamic-programming","title":"Dynamic Programming","description":"Dynamic Programming (DP) is a powerful optimization technique used to solve problems with overlapping subproblems and optimal substructure.","source":"@site/docs/leetcode_patterns/dynamic-programming.md","sourceDirName":"leetcode_patterns","slug":"/leetcode_patterns/dynamic-programming","permalink":"/leetcode-hub/docs/leetcode_patterns/dynamic-programming","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Welcome to the Interview Workshop","permalink":"/leetcode-hub/docs/intro"},"next":{"title":"leetcode150","permalink":"/leetcode-hub/docs/leetcode_patterns/leetcode150"}}');var i=t(4848),o=t(8453);const s={},d="Dynamic Programming",c={},l=[{value:"\ud83e\udde0 Key Concepts",id:"-key-concepts",level:2},{value:"\ud83e\uddf0 Common Types of DP",id:"-common-types-of-dp",level:2},{value:"\ud83d\udcdd Templates",id:"-templates",level:2},{value:"Top-Down (Memoization)",id:"top-down-memoization",level:3},{value:"Bottom-Up (Tabulation)",id:"bottom-up-tabulation",level:3}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"dynamic-programming",children:"Dynamic Programming"})}),"\n",(0,i.jsxs)(n.p,{children:["Dynamic Programming (DP) is a powerful optimization technique used to solve problems with ",(0,i.jsx)(n.strong,{children:"overlapping subproblems"})," and ",(0,i.jsx)(n.strong,{children:"optimal substructure"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-key-concepts",children:"\ud83e\udde0 Key Concepts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memoization"}),": Top-down recursion with caching"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tabulation"}),": Bottom-up iteration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State definition"}),": Clearly define what each ",(0,i.jsx)(n.code,{children:"dp[i]"})," represents"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transition relation"}),": Determine how current state builds from previous ones"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-common-types-of-dp",children:"\ud83e\uddf0 Common Types of DP"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Examples"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1D DP"}),(0,i.jsx)(n.td,{children:"Fibonacci, Climbing Stairs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2D DP (grid)"}),(0,i.jsx)(n.td,{children:"Unique Paths, Longest Common Subsequence"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Subset DP"}),(0,i.jsx)(n.td,{children:"Knapsack, Target Sum"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP with Choices"}),(0,i.jsx)(n.td,{children:"House Robber, Coin Change"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP on Strings"}),(0,i.jsx)(n.td,{children:"Palindromes, Edit Distance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DP on Trees/Graphs"}),(0,i.jsx)(n.td,{children:"Tree DP, DAG longest path"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-templates",children:"\ud83d\udcdd Templates"}),"\n",(0,i.jsx)(n.h3,{id:"top-down-memoization",children:"Top-Down (Memoization)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def dp(i):\n    if i in memo:\n        return memo[i]\n    if base_case(i):\n        return result\n    memo[i] = combine(dp(i-1), dp(i-2), ...)\n    return memo[i]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"bottom-up-tabulation",children:"Bottom-Up (Tabulation)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"dp = [0] * (n + 1)\ndp[0] = base_case\nfor i in range(1, n + 1):\n    dp[i] = combine(dp[i-1], dp[i-2], ...)\nreturn dp[n]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);